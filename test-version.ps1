# Script de test pour le syst√®me de versioning
Write-Host "üß™ Test du syst√®me de versioning Online Book Brew" -ForegroundColor Cyan

# V√©rifier que le fichier de version existe
$versionFile = "api/version.json"
if (Test-Path $versionFile) {
    Write-Host "‚úÖ Fichier de version trouv√©: $versionFile" -ForegroundColor Green
    
    # Lire et afficher la version actuelle
    try {
        $versionData = Get-Content $versionFile | ConvertFrom-Json
        Write-Host "üìã Version actuelle:" -ForegroundColor Yellow
        Write-Host "   Version: $($versionData.version)" -ForegroundColor White
        Write-Host "   Build: $($versionData.build)" -ForegroundColor White
        Write-Host "   Dernier d√©ploiement: $($versionData.last_deploy)" -ForegroundColor White
        Write-Host "   Commit Git: $($versionData.git_commit)" -ForegroundColor White
        Write-Host "   Date: $($versionData.deploy_date)" -ForegroundColor White
    } catch {
        Write-Host "‚ùå Erreur lors de la lecture du fichier de version: $($_.Exception.Message)" -ForegroundColor Red
    }
} else {
    Write-Host "‚ùå Fichier de version non trouv√©: $versionFile" -ForegroundColor Red
}

Write-Host ""

# V√©rifier que les hooks Git existent
$hookBash = ".git/hooks/post-commit"
$hookPowerShell = ".git/hooks/post-commit.ps1"

if (Test-Path $hookBash) {
    Write-Host "‚úÖ Hook Git Bash trouv√©: $hookBash" -ForegroundColor Green
} else {
    Write-Host "‚ùå Hook Git Bash manquant: $hookBash" -ForegroundColor Red
}

if (Test-Path $hookPowerShell) {
    Write-Host "‚úÖ Hook Git PowerShell trouv√©: $hookPowerShell" -ForegroundColor Green
} else {
    Write-Host "‚ùå Hook Git PowerShell manquant: $hookPowerShell" -ForegroundColor Red
}

Write-Host ""

# V√©rifier que l'API de version est accessible
Write-Host "üåê Test de l'API de version..." -ForegroundColor Yellow
try {
    $response = Invoke-RestMethod -Uri "http://localhost:8001/api/version" -Method Get -ErrorAction Stop
    if ($response.status -eq "success") {
        Write-Host "‚úÖ API de version accessible" -ForegroundColor Green
        Write-Host "   Donn√©es re√ßues: $($response.data | ConvertTo-Json -Compress)" -ForegroundColor White
    } else {
        Write-Host "‚ö†Ô∏è API de version accessible mais statut: $($response.status)" -ForegroundColor Yellow
    }
} catch {
    Write-Host "‚ùå API de version non accessible: $($_.Exception.Message)" -ForegroundColor Red
    Write-Host "   V√©rifiez que le serveur local est d√©marr√© sur le port 8001" -ForegroundColor Yellow
}

Write-Host ""
Write-Host "üéØ Pour tester le versioning automatique:" -ForegroundColor Cyan
Write-Host "   1. Faites un commit: git add . && git commit -m 'Test versioning'" -ForegroundColor White
Write-Host "   2. V√©rifiez que la version s'est incr√©ment√©e dans api/version.json" -ForegroundColor White
Write-Host "   3. D√©ployez: .\deploy-to-morglaf.ps1 -FastDeploy" -ForegroundColor White
